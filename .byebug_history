q
0
[0..2]
feature
quit
n
trees_results[i]
n
actual
trees_results[41]
trees_results
aaa=i
n
c
b 34 if i==28
trees_results[28]
trees_results[27]
actual
trees_results[i]
c
b 34 if i==26
b 34 i==26
b
trees_results[26]
trees_results[25]
trees_results[24]
trees_results[23]
trees_results[22]
trees_results
aaa=i
result
n
result
n
result
n
aaa=i
i
result
actual
trees_results
trees_results.size
n
actual
result
n
actual
prophecy
c
bt
actual
prophecy
c
actual
prophecy
c
actual
prophecy
c
actual
prophecy
c
actual
prophecy
c
actual
prophecy
c
actual
prophecy
c
actual
prophecy
c
actual
prophecy
c
actual
prophecy
c
prophecy == actual
actual
prophecy
quit
c
quit
parent_set_stdev
n
results_vector
n
results_vector
n
s
n
results_vector
n
results_vector
n
s
quit
n
best_gain
c
feature
features
best_gain
c
best_gain
c
best_gain
c
best_gain
c
best_gain
feature
features
quit
c
split_index
split_gain
n
c
split_gain
n
c
split_gain
n
c
n
split_gain
n
right_set_prob
n
right_set_stdev
n
sorted_set.length
left_set_prob
n
left_set_stdev
n
parent_set_stdev
n
mean
s
results_vector
n
s
split_index
sorted_by_feature
feature
quit
c
@probability
@decision
@is_leaf
s
n
@feature
@split
n
@is_leaf
is_leaf
test_sample
quit
c
"0.486794" < @split
"0.48674" < @split
"0.48679" < @split
"0.4" < @split
"0.5" < @split
test_sample[@feature] <= @split
@split
test_sample[@feature] 
c
actual
prophecy
c
bt
results_vector
c
n
quit
c
results_vector.reduce(&:+) / n
c
results_vector.reduce(&:+) / n
c
results_vector.reduce(&:+) / n
c
results_vector.reduce(&:+) / n
c
results_vector.reduce(&:+) / n
c
results_vector.reduce(&:+) / n
c
results_vector.reduce(&:+) / n
c
n
results_vector.reduce(&:+) 
c
@left_node
@is_leaf
test_sample[@feature]
@split
test_sample[@feature] <= @split
c
test_sample[@feature] <= @split
c
test_sample[@feature] <= @split
c
@is_leaf
test_sample[@feature] 
@split
test_sample[@feature] <= @split
c
test_sample[@feature] <= @split
c
test_sample[@feature] <= @split
@split
test_sample
@feature
